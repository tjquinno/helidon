/*
 * Copyright (c) 2023 Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.helidon.microprofile.openapi;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import io.helidon.config.Config;
import io.helidon.config.metadata.Configured;
import io.helidon.config.metadata.ConfiguredOption;
import io.helidon.nima.openapi.OpenApiFeature;
import io.helidon.openapi.HelidonOpenApiConfig;

/**
 * Helidon-specific MP implementation of the SmallRye OpenApiConfig interface,
 * loadable from a Helidon {@link Config} object as well as individual items
 * settable programmatically.
 */
@Configured(prefix = MpOpenApiConfigImpl.Builder.MP_OPENAPI_CONFIG_PREFIX)
class MpOpenApiConfigImpl extends HelidonOpenApiConfig.Builder.ConfigImpl {

    private final Boolean scanDisable;
    private final Set<String> scanPackages;
    private final Set<String> scanClasses;
    private final Set<String> scanExcludePackages;
    private final Set<String> scanExcludeClasses;
    private final Boolean scanBeanValidation;
    private final Boolean scanDependenciesDisable;
    private final Set<String> scanDependenciesJars;

    private MpOpenApiConfigImpl(Builder builder) {
        super(builder);
        scanDisable = builder.scanDisable;
        scanPackages = builder.scanPackages;
        scanClasses = builder.scanClasses;
        scanExcludePackages = builder.scanExcludePackages;
        scanExcludeClasses = builder.scanExcludeClasses;
        scanBeanValidation = builder.scanBeanValidation;
        scanDependenciesDisable = builder.scanDependenciesDisable;
        scanDependenciesJars = builder.scanDependenciesJars;
    }

    @Override
    public boolean scanDisable() {
        return scanDisable;
    }

    @Override
    public Set<String> scanPackages() {
        return scanPackages;
    }

    @Override
    public Set<String> scanClasses() {
        return scanClasses;
    }

    @Override
    public Set<String> scanExcludePackages() {
        return scanExcludePackages;
    }

    @Override
    public Set<String> scanExcludeClasses() {
        return scanExcludeClasses;
    }

    @Override
    public boolean scanBeanValidation() {
        return scanBeanValidation;
    }

    @Override
    public boolean scanDependenciesDisable() {
        return scanDependenciesDisable;
    }

    @Override
    public Set<String> scanDependenciesJars() {
        return scanDependenciesJars;
    }

    /**
     * Fluent builder for {@link io.helidon.microprofile.openapi.MpOpenApiConfigImpl}.
     */
    @Configured
    public static class Builder extends HelidonOpenApiConfig.Builder {
        // This is the prefix users will use in the config file.
        static final String MP_OPENAPI_CONFIG_PREFIX = "mp." + OpenApiFeature.Builder.CONFIG_KEY;
        static final String SCAN_DISABLE = "scan.disable";
        static final String SCAN_PACKAGES = "scan.packages";
        static final String SCAN_CLASSES = "scan.classes";
        static final String SCAN_EXCLUDE_PACKAGES = "scan.exclude.packages";
        static final String SCAN_EXCLUDE_CLASSES = "scan.exclude.classes";
        static final String SCAN_BEAN_VALIDATION = "scan.bean-validation";
        static final String SCAN_DEPENDENCIES_DISABLE = "scan-dependencies.disable";
        static final String SCAN_DEPENDENCIES_JARS = "scan-dependencies.jars";

        private static final Set<String> NEVER_SCAN_PACKAGES = Set.of("java.lang");
        private static final Set<String> NEVER_SCAN_CLASSES = Set.of();
        private static final String USE_JAXRS_SEMANTICS_CONFIG_KEY = "use-jaxrs-semantics";

        private static final String USE_JAXRS_SEMANTICS_FULL_CONFIG_KEY =
                "mp.openapi.extensions.helidon." + USE_JAXRS_SEMANTICS_CONFIG_KEY;
        private static final boolean USE_JAXRS_SEMANTICS_DEFAULT = true;


        private boolean scanDisable = true;
        private final Set<String> scanPackages = new HashSet<>();
        private final Set<String> scanClasses = new HashSet<>();
        private final Set<String> scanExcludePackages = new HashSet<>();
        private final Set<String> scanExcludeClasses = new HashSet<>();
        private boolean scanBeanValidation = true;
        private Boolean scanDependenciesDisable = Boolean.FALSE;
        private final Set<String> scanDependenciesJars = new HashSet<>();


        @Override
        public Builder config(Config config) {
            super.config(config);
            config.get(SCAN_BEAN_VALIDATION).asBoolean().ifPresent(this::scanBeanValidation);
            config.get(SCAN_DISABLE).asBoolean().ifPresent(this::scanDisable);
            config.get(SCAN_PACKAGES).as(Builder::simpleSet).ifPresent(this::scanPackages);
            config.get(SCAN_CLASSES).as(Builder::simpleSet).ifPresent(this::scanClasses);
            config.get(SCAN_EXCLUDE_PACKAGES).as(Builder::simpleSet).ifPresent(this::scanExcludePackages);
            config.get(SCAN_EXCLUDE_CLASSES).as(Builder::simpleSet).ifPresent(this::scanExcludeClasses);
            config.get(SCAN_DEPENDENCIES_DISABLE).asBoolean().ifPresent(this::scanDependenciesDisable);
            config.get(SCAN_DEPENDENCIES_JARS).as(Builder::simpleSet).ifPresent(this::scanDependenciesJars);
            return this;
        }

        @Override
        public MpOpenApiConfigImpl build() {
            scanExcludePackages.addAll(NEVER_SCAN_PACKAGES);
            scanExcludeClasses.addAll(NEVER_SCAN_CLASSES);
            return new MpOpenApiConfigImpl(this);
        }

        /**
         * Sets whether annotation scanning should be disabled.
         *
         * @param value new setting for annotation scanning disabled flag
         * @return updated builder
         */
        @ConfiguredOption(key = SCAN_DISABLE)
        public Builder scanDisable(boolean value) {
            scanDisable = value;
            return this;
        }

        /**
         * Sets whether bean validation scanning is enabled.
         *
         * @param value true/false
         * @return updated builder
         */
        @ConfiguredOption(value = "true", key = SCAN_BEAN_VALIDATION)
        public Builder scanBeanValidation(Boolean value) {
            scanBeanValidation = value;
            return this;
        }

        /**
         * Sets whether dependencies scan is disabled.
         *
         * @param value true/false
         * @return updated builder
         */
        @ConfiguredOption(value = "false", key = SCAN_DEPENDENCIES_DISABLE)
        public Builder scanDependenciesDisable(boolean value) {
            scanDependenciesDisable = value;
            return this;
        }

        /**
         * Sets the dependency JARs to be scanned.
         *
         * @param value {@code Set} of JAR names to be scanned
         * @return updated builder
         */
        @ConfiguredOption(key = SCAN_DEPENDENCIES_JARS)
        public Builder scanDependenciesJars(Set<String> value) {
            scanDependenciesJars.clear();
            scanDependenciesJars.addAll(value);
            return this;
        }

        /**
         * Add a dependency JAR to be scanned.
         *
         * @param value JAR file name
         * @return updated builder
         */
        public Builder addScanDependenciesJar(String value){
            scanDependenciesJars.add(value);
            return this;
        }

        /**
         * Sets the packages to be scanned.
         *
         * @param packages {@code Set} of package names
         * @return updated builder
         */
        @ConfiguredOption(key = SCAN_PACKAGES)
        public Builder scanPackages(Set<String> packages) {
            scanPackages.clear();
            scanPackages.addAll(packages);
            return this;
        }

        /**
         * Add a package to be scanned.
         *
         * @param packageName name of the package to add for scanning
         * @return updated builder
         */
        public Builder addScanPackage(String packageName) {
            scanPackages.add(packageName);
            return this;
        }

        /**
         * Sets the classes to be scanned.
         *
         * @param classes {@code Set} of class names
         * @return updated builder
         */
        @ConfiguredOption(key = SCAN_CLASSES)
        public Builder scanClasses(Set<String> classes) {
            scanClasses.clear();
            scanClasses.addAll(classes);
            return this;
        }

        /**
         * Add a class to be scanned.
         *
         * @param className name of the class to add for scanning
         * @return updated builder
         */
        public Builder addScanClass(String className) {
            scanClasses.add(className);
            return this;
        }

        /**
         * Sets the packages to exclude from scanning.
         *
         * @param scanExcludePackages {@code Set} of package names to exclude
         * @return updated builder
         */
        @ConfiguredOption(key = SCAN_EXCLUDE_PACKAGES)
        public Builder scanExcludePackages(Set<String> scanExcludePackages) {
            this.scanExcludePackages.clear();
            this.scanExcludePackages.addAll(scanExcludePackages);
            return this;
        }

        /**
         * Add a package to be excluded from scanning.
         *
         * @param packageName name of a package to exclude from scanning
         * @return updated builder
         */
        public Builder addScanExcludePackage(String packageName) {
            scanExcludePackages.add(packageName);
            return this;
        }

        /**
         * Sets the classes to be excluded from scanning.
         *
         * @param scanExcludeClasses {@code Set} of class names to exclude
         * @return updated builder
         */
        @ConfiguredOption(key = SCAN_EXCLUDE_CLASSES)
        public Builder scanExcludeClasses(Set<String> scanExcludeClasses) {
            this.scanExcludeClasses.clear();
            this.scanExcludeClasses.addAll(scanExcludeClasses);
            return this;
        }

        /**
         * Add a class to be excluded from scanning.
         *
         * @param className name of a class to exclude from scanning
         * @return updated builder
         */
        public Builder addScanExcludeClass(String className) {
            scanExcludeClasses.add(className);
            return this;
        }

        /**
         * Converts the string value (comma-separated sequence) of a config node to a {@code Set<String>}.

         * @param config the config node potentially containing a comma-list string
         * @return {@code Optional} of a {@code Set<String>} from parsing the comma-list
         */
        protected static Set<String> simpleSet(Config config) {
            return config
                    .asString()
                    .map(s -> Arrays.stream(s.split(",")).collect(Collectors.toSet()))
                    .orElse(Set.of());
        }
    }
}
